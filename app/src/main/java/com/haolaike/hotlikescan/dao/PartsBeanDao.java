package com.haolaike.hotlikescan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haolaike.hotlikescan.beans.PartsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARTS_BEAN".
*/
public class PartsBeanDao extends AbstractDao<PartsBean, Long> {

    public static final String TABLENAME = "PARTS_BEAN";

    /**
     * Properties of entity PartsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Bztm = new Property(1, String.class, "bztm", false, "BZTM");
        public final static Property Vbeln = new Property(2, String.class, "vbeln", false, "VBELN");
        public final static Property Posnr = new Property(3, String.class, "posnr", false, "POSNR");
        public final static Property Bjbz = new Property(4, String.class, "bjbz", false, "BJBZ");
        public final static Property PackageNo = new Property(5, String.class, "packageNo", false, "PACKAGE_NO");
        public final static Property OrderNo = new Property(6, String.class, "orderNo", false, "ORDER_NO");
        public final static Property RowNo = new Property(7, String.class, "rowNo", false, "ROW_NO");
        public final static Property SoOrderNo = new Property(8, String.class, "soOrderNo", false, "SO_ORDER_NO");
        public final static Property ChlidOrderNo = new Property(9, String.class, "chlidOrderNo", false, "CHLID_ORDER_NO");
        public final static Property IsScan = new Property(10, boolean.class, "isScan", false, "IS_SCAN");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(12, long.class, "time", false, "TIME");
        public final static Property TargetBztm = new Property(13, String.class, "targetBztm", false, "TARGET_BZTM");
    }


    public PartsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PartsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BZTM\" TEXT," + // 1: bztm
                "\"VBELN\" TEXT," + // 2: vbeln
                "\"POSNR\" TEXT," + // 3: posnr
                "\"BJBZ\" TEXT," + // 4: bjbz
                "\"PACKAGE_NO\" TEXT," + // 5: packageNo
                "\"ORDER_NO\" TEXT," + // 6: orderNo
                "\"ROW_NO\" TEXT," + // 7: rowNo
                "\"SO_ORDER_NO\" TEXT," + // 8: soOrderNo
                "\"CHLID_ORDER_NO\" TEXT," + // 9: chlidOrderNo
                "\"IS_SCAN\" INTEGER NOT NULL ," + // 10: isScan
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"TIME\" INTEGER NOT NULL ," + // 12: time
                "\"TARGET_BZTM\" TEXT);"); // 13: targetBztm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PartsBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String bztm = entity.getBztm();
        if (bztm != null) {
            stmt.bindString(2, bztm);
        }
 
        String vbeln = entity.getVbeln();
        if (vbeln != null) {
            stmt.bindString(3, vbeln);
        }
 
        String posnr = entity.getPosnr();
        if (posnr != null) {
            stmt.bindString(4, posnr);
        }
 
        String bjbz = entity.getBjbz();
        if (bjbz != null) {
            stmt.bindString(5, bjbz);
        }
 
        String packageNo = entity.getPackageNo();
        if (packageNo != null) {
            stmt.bindString(6, packageNo);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(7, orderNo);
        }
 
        String rowNo = entity.getRowNo();
        if (rowNo != null) {
            stmt.bindString(8, rowNo);
        }
 
        String soOrderNo = entity.getSoOrderNo();
        if (soOrderNo != null) {
            stmt.bindString(9, soOrderNo);
        }
 
        String chlidOrderNo = entity.getChlidOrderNo();
        if (chlidOrderNo != null) {
            stmt.bindString(10, chlidOrderNo);
        }
        stmt.bindLong(11, entity.getIsScan() ? 1L: 0L);
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getTime());
 
        String targetBztm = entity.getTargetBztm();
        if (targetBztm != null) {
            stmt.bindString(14, targetBztm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PartsBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String bztm = entity.getBztm();
        if (bztm != null) {
            stmt.bindString(2, bztm);
        }
 
        String vbeln = entity.getVbeln();
        if (vbeln != null) {
            stmt.bindString(3, vbeln);
        }
 
        String posnr = entity.getPosnr();
        if (posnr != null) {
            stmt.bindString(4, posnr);
        }
 
        String bjbz = entity.getBjbz();
        if (bjbz != null) {
            stmt.bindString(5, bjbz);
        }
 
        String packageNo = entity.getPackageNo();
        if (packageNo != null) {
            stmt.bindString(6, packageNo);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(7, orderNo);
        }
 
        String rowNo = entity.getRowNo();
        if (rowNo != null) {
            stmt.bindString(8, rowNo);
        }
 
        String soOrderNo = entity.getSoOrderNo();
        if (soOrderNo != null) {
            stmt.bindString(9, soOrderNo);
        }
 
        String chlidOrderNo = entity.getChlidOrderNo();
        if (chlidOrderNo != null) {
            stmt.bindString(10, chlidOrderNo);
        }
        stmt.bindLong(11, entity.getIsScan() ? 1L: 0L);
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getTime());
 
        String targetBztm = entity.getTargetBztm();
        if (targetBztm != null) {
            stmt.bindString(14, targetBztm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PartsBean readEntity(Cursor cursor, int offset) {
        PartsBean entity = new PartsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bztm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vbeln
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // posnr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bjbz
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // packageNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rowNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // soOrderNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // chlidOrderNo
            cursor.getShort(offset + 10) != 0, // isScan
            cursor.getInt(offset + 11), // type
            cursor.getLong(offset + 12), // time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // targetBztm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PartsBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBztm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVbeln(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosnr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBjbz(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPackageNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRowNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSoOrderNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChlidOrderNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsScan(cursor.getShort(offset + 10) != 0);
        entity.setType(cursor.getInt(offset + 11));
        entity.setTime(cursor.getLong(offset + 12));
        entity.setTargetBztm(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PartsBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PartsBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PartsBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
